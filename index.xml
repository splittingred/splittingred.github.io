<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>splittingred.github.io</title>
    <link>https://splittingred.com/</link>
    <description>Recent content on splittingred.github.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 19 Jan 2016 21:45:03 -0600</lastBuildDate><atom:link href="https://splittingred.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Why the Way We Look at Technical Debt Is Wrong</title>
      <link>https://splittingred.com/blogs/why-the-way-we-look-at-technical-debt-is-wrong/</link>
      <pubDate>Tue, 19 Jan 2016 21:45:03 -0600</pubDate>
      
      <guid>https://splittingred.com/blogs/why-the-way-we-look-at-technical-debt-is-wrong/</guid>
      <description>This post is cross-posted from bigeng.io — feel free to read there!
I’ll be straightforward at the start of this post: I firmly believe that the most important issue a company deals with is how it reconciles itself with technical debt. Period.
Now, here’s the real point of this post:
Technical Debt is a Positive and Necessary Step in software engineering.
First off, let’s define technical debt for the purposes of this post, as the words can mean many different things to different people.</description>
    </item>
    
    <item>
      <title>Learn the Code</title>
      <link>https://splittingred.com/blogs/learn-the-code/</link>
      <pubDate>Sun, 18 May 2014 13:20:30 -0600</pubDate>
      
      <guid>https://splittingred.com/blogs/learn-the-code/</guid>
      <description>A good buddy of mine worked at a software company a few years ago that was moving at a breakneck pace of growth. The company was doing well, and my friend was on a software development team that was in charge of one of the core parts of the product. He enjoyed his job, but found that he was never satisfied with his boss. The team always felt overworked, tech debt rose, and eventually quite a few high-talent engineers left.</description>
    </item>
    
    <item>
      <title>Lets Build It All</title>
      <link>https://splittingred.com/blogs/lets-build-it-all/</link>
      <pubDate>Tue, 01 Apr 2014 21:41:48 -0600</pubDate>
      
      <guid>https://splittingred.com/blogs/lets-build-it-all/</guid>
      <description>A long while ago, I did a consulting gig for a mid-sized company. This company had spent thousands of dollars on a revamp for one of its sections on its website. It was pretty slick: filterable navigation, lazy-loading, compressed assets, blazing load times. It used all the modern design principles and standards. It was mobile friendly (a big deal for the time). The design was slick, informed and easy on the eyes.</description>
    </item>
    
    <item>
      <title>The Power of Context in Software Engineering</title>
      <link>https://splittingred.com/blogs/the-power-of-context-in-software-engineering/</link>
      <pubDate>Sun, 30 Mar 2014 22:53:58 +0530</pubDate>
      
      <guid>https://splittingred.com/blogs/the-power-of-context-in-software-engineering/</guid>
      <description>Or, Where 10x Really Lies</description>
    </item>
    
  </channel>
</rss>
